#pragma once
#include"InputOutput.h"
#include"Sort.h"



/*Подпрограмма, которая выполняет работу над массивом:
ввод , вывод и сортировку Пузырьком.*/
template<typename T>
void BubbleSortActions(int n)
{
	T* array = new T[n];                     //Выделение памяти под массив. 
	Input(array, n);                         //Ввод элементов массива на экран.
	cout << "Исходный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	BubbleSort(array, n);
	cout << "Преобразованный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	delete[]array;                           //Удаление массива из памяти.
}

/*Подпрограмма, которая выполняет работу над массивом:
ввод , вывод и сортировку методом Шелла.*/
template<typename T>
void ShellSortActions(int n)
{
	T* array = new T[n];                     //Выделение памяти под массив. 
	Input(array, n);                         //Ввод элементов массива на экран.
	cout << "Исходный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	ShellSort(array, n);
	cout << "Преобразованный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	delete[]array;                           //Удаление массива из памяти.
}

/*Подпрограмма, которая выполняет работу над массивом:
ввод , вывод и быструю сортировку.*/
template<typename T>
void QuickSortActions(int n)
{
	T* array = new T[n];                     //Выделение памяти под массив. 
	Input(array, n);                         //Ввод элементов массива на экран.
	cout << "Исходный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	QuickSort(array, 0, n - 1);
	cout << "Преобразованный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	delete[]array;                           //Удаление массива из памяти.
}

/*Подпрограмма, которая выполняет работу над массивом:
ввод , вывод и поразрядную сортировку.*/
template<typename T>
void RadixSortActions(int n)
{
	T* array = new T[n];                     //Выделение памяти под массив. 
	Input(array, n);                         //Ввод элементов массива на экран.
	cout << "Исходный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	RadixSort(array, n);
	cout << "Преобразованный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	delete[]array;                           //Удаление массива из памяти.
}

/*Подпрограмма, которая выполняет работу над массивом:
ввод , вывод и пирамидальную сортировку.*/
template<typename T>
void HeapSortActions(int n)
{
	T* array = new T[n];                     //Выделение памяти под массив. 
	Input(array, n);                         //Ввод элементов массива на экран.
	cout << "Исходный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	HeapSort(array, n);
	cout << "Преобразованный массив:\n";
	Output(array, n);                        //Вывод элементов массива на экран.
	delete[]array;                           //Удаление массива из памяти.
}

